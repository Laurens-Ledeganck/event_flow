timestamp;model_type;run_name;loss;notes;architecture;params
2025-02-09 21:00:00;FireNet;gaudy-robin-611;0.7478103697151317;;;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FireNet', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-02-09 22:00:00;FireNet;nervous-ram-566;0.7478103697151317;;;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FireNet', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-02-09 22:44:23;FullRotationModel;luminous-cub-813;3.52742298742538e-07;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (2): Conv2d(8, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=1024, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (2): Conv2d(8, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=1024, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 220161;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 09:53:04;FullRotationModel;puzzled-colt-56;1.200997402950299e-06;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 12:30:28;FullRotationModel;blushing-gull-656;0.0024677146600000236;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2254965;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 16:47:58;FullRotationModel;suave-conch-448;0.003171469976495178;first attempt with euler_deg targets;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2254965;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 20, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 17:15:49;FullRotationModel;flawless-gnat-521;3.2987529496664777e-06;first attempt with matrix targets;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 17:31:02;FullRotationModel;trusting-toad-636;3.5042297625135955e-06;matrix targets with lower lr;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 5e-05}}
2025-03-02 12:31:01;FullRotationModel;respected-koi-704;0.0012246937609975425;euler_deg targets with augmentation;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2254965;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0.5, 0.1, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-02 12:57:13;FullRotationModel;capricious-vole-925;0.00034224711030470315;first attempt quat targets;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=4, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=4, bias=True)       )     )   ) ) Trainable parameters: 2255030;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'quat', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-02 13:28:17;FullRotationModel;gregarious-bird-447;4.866386048227268e-06;matrix targets with augmentation;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.5, 0.1, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 5e-05}}
2025-03-02 20:41:35;FullRotationModel;abundant-sow-782;0.03793013500785511;orientation included input, euler_deg diff targets;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-02 20:56:18;FullRotationModel;silent-wren-992;0.015559075356074587;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32772, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=4, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32772, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=4, bias=True)       )     )   ) ) Trainable parameters: 2255286;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'absolute', 'rotation_type': 'quat', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
;;;;;;
2025-04-21 13:48:08;FullRotationModel;carefree-trout-534;0.03912447294850552;Testing logging functionality;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'Testing logging functionality'}}
2025-04-21 21:55:33;FullRotationModel;bouncy-foal-460;0.037212283887006696;wandb testing;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'wandb testing'}}
2025-04-23 00:15:25;FullRotationModel;fearless-trout-928;;W&B debugging;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'W&B debugging'}}
2025-04-23 00:41:53;FullRotationModel;stately-gull-937;0.047876942602680043;More W&B debugging;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'More W&B debugging'}}
2025-04-23 00:46:34;FullRotationModel;carefree-cow-679;;Even more debugging;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'Even more debugging'}}
2025-04-23 00:58:18;FullRotationModel;funny-rat-703;;one more itme;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'one more itme'}}
2025-04-24 21:43:19;FullRotationModel;popular-quail-331;;W&B debugging;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'W&B debugging'}}
2025-05-22 23:11:41;FullRotationModel;sassy-mole-648;;this;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 1, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'this'}}
2025-05-22 23:19:54;FullRotationModel;calm-slug-127;;this;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 1, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cpu')}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'this'}}
2025-05-23 19:54:59;FullRotationModel;23-5-burly-panda;0.04758070217428287;this;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 1, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'this'}}
2025-05-23 21:52:22;FullRotationModel;23-5-calm-squirrel;0.0580411574639839;n/a;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0, 0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'include_init': True, 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}, 'logging': {'note': 'n/a'}}
2025-05-24 14:00:42;FullRotationModel;24-5-wise-shoat;0.050855281608016556;this;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 5, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'this'}}
2025-05-24 14:01:39;FullRotationModel;24-5-gaudy-hen;0.05927160996441733;fucking;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 5, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.002, 'name': 'Adam'}, 'logging': {'note': 'fucking'}}
2025-05-24 14:05:42;FullRotationModel;24-5-grandiose-goose;0.06620669525101427;works;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32771, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32771, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2255157;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 7, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0, 0, 0.0], 'n_epochs': 5, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg'}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'include_init': True, 'kernel_size': 3, 'mask_output': True, 'model_type': 'conv', 'name': 'FullRotationModel', 'norm_input': False, 'num_bins': 2, 'prev_runid': 'nervous-ram-566', 'round_encoding': False, 'transfer_layer': 'pred', 'use_existing': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.002, 'name': 'Adam'}, 'logging': {'note': 'works'}}
;;;;;;
2025-05-26 01:29:28;FireNet;26-5-languid-wren;;Retraining FireNet;FireNet(   (head): ConvLayer_(     (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G1): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G2): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (pred): ConvLayer(     (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))   ) ) Trainable parameters: 148450;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'FireNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'Retraining FireNet'}}
2025-05-26 09:26:46;FireNet;26-5-fun-skunk;;Retraining FireNet;FireNet(   (head): ConvLayer_(     (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G1): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G2): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (pred): ConvLayer(     (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))   ) ) Trainable parameters: 148450;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'FireNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'Retraining FireNet'}}
2025-05-26 20:37:58;FireNet;26-5-masked-shad;0.6992021030128838;Retraining FireNet;FireNet(   (head): ConvLayer_(     (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G1): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G2): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (pred): ConvLayer(     (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))   ) ) Trainable parameters: 148450;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'FireNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'Retraining FireNet'}}
2025-05-26 21:09:35;FireNet;26-5-useful-grub;;FireNet but time difference of 0.002;FireNet(   (head): ConvLayer_(     (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G1): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G2): ConvGRU(     (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (pred): ConvLayer(     (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))   ) ) Trainable parameters: 148450;{'experiment': 'Default', 'data': {'mode': 'time', 'window': 0.002, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 1, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'FireNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'FireNet but time difference of 0.002'}}
2025-05-26 21:10:03;EVFlowNet;26-5-wistful-bass;;EVFlowNet but time difference of 0.001;EVFlowNet(   (multires_unet): MultiResUNet(     (encoders): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(2, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(514, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(258, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (3): UpsampleConvLayer(         (conv2d): Conv2d(130, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (preds): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))       )     )   ) ) Trainable parameters: 14128552;{'experiment': 'Default', 'data': {'mode': 'time', 'window': 0.001, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 1, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'EVFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'EVFlowNet but time difference of 0.001'}}
2025-05-26 21:10:10;EVFlowNet;26-5-upset-cod;;EVFlowNet but time difference of 0.002;EVFlowNet(   (multires_unet): MultiResUNet(     (encoders): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(2, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(514, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(258, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (3): UpsampleConvLayer(         (conv2d): Conv2d(130, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (preds): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))       )     )   ) ) Trainable parameters: 14128552;{'experiment': 'Default', 'data': {'mode': 'time', 'window': 0.002, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 1, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'EVFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'EVFlowNet but time difference of 0.002'}}
2025-05-26 21:11:45;EVFlowNet;26-5-gentle-bat;;EVFlowNet but time difference of 0.005;EVFlowNet(   (multires_unet): MultiResUNet(     (encoders): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(2, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(514, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(258, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (3): UpsampleConvLayer(         (conv2d): Conv2d(130, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (preds): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))       )     )   ) ) Trainable parameters: 14128552;{'experiment': 'Default', 'data': {'mode': 'time', 'window': 0.005, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 1, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'EVFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'EVFlowNet but time difference of 0.005'}}
2025-05-26 21:13:40;EVFlowNet;26-5-resilient-dove;;EVFlowNet but time difference of 0.01;EVFlowNet(   (multires_unet): MultiResUNet(     (encoders): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(2, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(514, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(258, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (3): UpsampleConvLayer(         (conv2d): Conv2d(130, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (preds): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))       )     )   ) ) Trainable parameters: 14128552;{'experiment': 'Default', 'data': {'mode': 'time', 'window': 0.01, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 1, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'EVFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'EVFlowNet but time difference of 0.01'}}
2025-05-27 12:21:48;EVFlowNet;26-5-melodic-vole;0.7134014188440421;Nice encoder-decoder;EVFlowNet(   (multires_unet): MultiResUNet(     (encoders): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(2, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(514, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(258, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (3): UpsampleConvLayer(         (conv2d): Conv2d(130, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (preds): ModuleList(       (0): ConvLayer(         (conv2d): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))       )       (1): ConvLayer(         (conv2d): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))       )       (2): ConvLayer(         (conv2d): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))       )       (3): ConvLayer(         (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))       )     )   ) ) Trainable parameters: 14128552;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'EVFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'Nice encoder-decoder'}}
2025-05-27 18:54:01;FireFlowNet;27-5-brawny-skink;0.7424343244729016;Hybrid of the previous two?;FireFlowNet(   (head): ConvLayer_(     (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G1): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R1b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (G2): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2a): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (R2b): ConvLayer_(     (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))   )   (pred): ConvLayer(     (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))   ) ) Trainable parameters: 56162;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'FireFlowNet', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'Hybrid of the previous two?'}}
2025-05-27 20:01:17;E2VID;27-5-bouncy-hog;0.8420927925261307;More exotic architecture;E2VID(   (unetrecurrent): UNetRecurrent(     (head): ConvLayer(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (encoders): ModuleList(       (0): RecurrentConvLayer(         (conv): ConvLayer(           (conv2d): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         )         (recurrent_block): ConvLSTM(           (Gates): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         )       )       (1): RecurrentConvLayer(         (conv): ConvLayer(           (conv2d): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         )         (recurrent_block): ConvLSTM(           (Gates): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         )       )       (2): RecurrentConvLayer(         (conv): ConvLayer(           (conv2d): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         )         (recurrent_block): ConvLSTM(           (Gates): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         )       )     )     (resblocks): ModuleList(       (0-1): 2 x ResidualBlock(         (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))         (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (decoders): ModuleList(       (0): UpsampleConvLayer(         (conv2d): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (1): UpsampleConvLayer(         (conv2d): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )       (2): UpsampleConvLayer(         (conv2d): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       )     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   ) ) Trainable parameters: 9330754;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000.0, 'path': 'datasets/data/flow/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'augment_prob': [0.5, 0.5, 0.5], 'n_epochs': 100}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'activations': ['relu', None], 'base_num_channels': 32, 'encoding': 'cnt', 'kernel_size': 3, 'mask_output': True, 'name': 'E2VID', 'norm_input': False, 'num_bins': 2, 'round_encoding': False, 'spiking_neuron': None}, 'vis': {'bars': False, 'enabled': False, 'px': 400, 'store_grads': False, 'verbose': True}, 'loss': {'clip_grad': 100.0, 'flow_regul_weight': 0.001, 'overwrite_intermediate': False}, 'optimizer': {'lr': 0.0002, 'name': 'Adam'}, 'logging': {'note': 'More exotic architecture'}}
;;;;;;