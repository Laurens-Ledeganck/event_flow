timestamp;model_type;run_name;loss;notes;architecture;params
2025-02-09 21:00:00;FireNet;gaudy-robin-611;0.7478103697151317;;;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FireNet', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-02-09 22:00:00;FireNet;nervous-ram-566;0.7478103697151317;;;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FireNet', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-02-09 22:44:23;FullRotationModel;luminous-cub-813;3.52742298742538e-07;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (2): Conv2d(8, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=1024, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (2): Conv2d(8, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=1024, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 220161;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 09:53:04;FullRotationModel;puzzled-colt-56;1.200997402950299e-06;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 12:30:28;FullRotationModel;blushing-gull-656;0.0024677146600000236;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2254965;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'rotation_mode': 'difference', 'rotation_type': 'rotvec', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 16:47:58;FullRotationModel;suave-conch-448;0.003171469976495178;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=3, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=3, bias=True)       )     )   ) ) Trainable parameters: 2254965;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'euler_deg', 'n_epochs': 20, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 17:15:49;FullRotationModel;flawless-gnat-521;3.2987529496664777e-06;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 0.0002}}
2025-03-01 17:31:02;FullRotationModel;trusting-toad-636;3.5042297625135955e-06;;FullRotationModel(   (flow_model): FireNet(     (head): ConvLayer_(       (conv2d): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G1): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R1b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (G2): ConvGRU(       (reset_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (update_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))       (out_gate): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2a): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (R2b): ConvLayer_(       (conv2d): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))     )     (pred): ConvLayer(       (conv2d): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))     )   )   (rotation_model): ConvRotationModel(     (conv_layers): Sequential(       (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))     )     (linear_layers): Sequential(       (0): Linear(in_features=32768, out_features=64, bias=True)       (1): ReLU()       (2): Linear(in_features=64, out_features=64, bias=True)       (3): ReLU()       (4): Linear(in_features=64, out_features=9, bias=True)     )     (layers): Sequential(       (0): Sequential(         (0): Conv2d(2, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))         (1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))       )       (1): Flatten(start_dim=1, end_dim=-1)       (2): Sequential(         (0): Linear(in_features=32768, out_features=64, bias=True)         (1): ReLU()         (2): Linear(in_features=64, out_features=64, bias=True)         (3): ReLU()         (4): Linear(in_features=64, out_features=9, bias=True)       )     )   ) ) Trainable parameters: 2255355;{'experiment': 'Default', 'data': {'mode': 'events', 'window': 1000, 'path': 'datasets/data/rotation/', 'window_loss': 10000}, 'loader': {'resolution': [128, 128], 'batch_size': 8, 'augment': ['Horizontal', 'Vertical', 'Polarity'], 'gpu': 0, 'seed': 0, 'rotation_mode': 'difference', 'rotation_type': 'matrix', 'n_epochs': 100, 'augment_prob': [0.0, 0.0, 0.0]}, 'hot_filter': {'enabled': False, 'max_px': 100, 'min_obvs': 5, 'max_rate': 0.8}, 'model': {'name': 'FullRotationModel', 'model_type': 'conv', 'use_existing': True, 'prev_runid': 'nervous-ram-566', 'transfer_layer': 'pred', 'encoding': 'cnt', 'round_encoding': False, 'norm_input': False, 'num_bins': 2, 'base_num_channels': 32, 'kernel_size': 3, 'activations': ['relu', None], 'mask_output': True, 'spiking_neuron': None, 'device': device(type='cuda', index=0)}, 'vis': {'bars': False, 'verbose': True, 'enabled': False, 'px': 400, 'store_grads': False}, 'loss': {'flow_regul_weight': 0.001, 'clip_grad': 100.0, 'overwrite_intermediate': False}, 'optimizer': {'name': 'Adam', 'lr': 5e-05}}
